# -*- coding: utf-8 -*-
"""p1p.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zOo7EUF7DuUYCVQTgAYTxfPh49ubw5Dg
"""

import pandas as pd
import tensorflow as tf
import matplotlib.pyplot as plt
import seaborn as sb
import numpy as np

df = pd.read_csv("Boston.csv")
df

df.drop(['Unnamed: 0'], inplace=True, axis = 1)

df.describe()

dataplot = sb.heatmap(df.corr(),annot=False)

from pandas.plotting import scatter_matrix

cols = ["medv","lstat","zn","rm"]

plot = scatter_matrix(df[cols],figsize=(12,8))

corr = df.corr()
corr['medv'].sort_values(ascending=False)

from sklearn.model_selection import train_test_split

x_train, x_test, y_train, y_test = train_test_split(df.drop(['medv'], axis=1),df['medv'],random_state=42,test_size=0.2)

from sklearn.preprocessing import StandardScaler

scaler = StandardScaler()
x_train_scaled = scaler.fit_transform(x_train)
x_test_scaled = scaler.transform(x_test)

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense

model = Sequential(layers = [
    Dense(64,input_shape=(x_train_scaled.shape[1],),activation="relu"),
    Dense(32,activation="relu"),
    Dense(16,activation="relu"),
    Dense(1,activation="linear")
])

model.compile(optimizer="adam",loss="mse",metrics=['mae'])
model.summary()

history = model.fit(x_train_scaled,y_train,validation_split=0.2,epochs=100,verbose=1)

# Evaluate the model

from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score

# Predict on the test set
y_pred = model.predict(x_test_scaled)

# Calculate metrics
mae = mean_absolute_error(y_test, y_pred)
rmse = np.sqrt(mean_squared_error(y_test, y_pred))
r2 = r2_score(y_test, y_pred)

print(r2)

print(f"Test MAE: {mae:.2f}")
print(f"Test RMSE: {rmse:.2f}")

